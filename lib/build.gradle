/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:31.1-jre'
    
    broken 'org.apache.xmlgraphics:batik-script:1.11'
    broken 'xalan:xalan:2.7.2'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.addDependenciesModuleInfo.doFirst {
    fixJar('batik-script', 'org.apache.batik.script.InterpreterFactory', 'org.apache.batik.bridge.RhinoInterpreterFactory')
    fixJar('xalan', 'org.apache.xalan.extensions.bsf.BSFManager', 'org.apache.bsf.BSFManager')
    // ... additional calls to fixJar are probably needed
}

def fixJar(String jarPrefix, String service, String brokenImpl) {
    configurations.broken.files.findAll { f ->
        f.name.startsWith jarPrefix
    }.each { brokenJar ->
        def destDir = file("$buildDir/broken")
        delete destDir
        mkdir destDir

        def zt = zipTree(brokenJar)
        def expandedPath = zt.asFileTree.tree.mirror.dir.path
        def files = zt.files.each { f ->
            def pathInJar = (f.path - expandedPath).substring(1)
            def destFilePath = destDir.toPath().resolve(pathInJar)
            mkdir destFilePath.parent
            java.nio.file.Files.copy(f.toPath(), destFilePath)
        }
        def svcFile = destDir.toPath().resolve("META-INF/services/$service").toFile()
        def newText = svcFile.text.replace(brokenImpl, '')
        svcFile.text = newText

        delete brokenJar
        def jarExec = java.util.spi.ToolProvider.findFirst( "jar" ).get()
        def result = jarExec.run(System.out, System.err,
            '-cf', "$brokenJar.path", '-C', destDir.path, '.')
        println "Fixed $brokenJar"
    }
}


